start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=3))
names(results)<- c("Your Wins","Opponent Wins","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
start.deck
i=1
new.deck <- start.deck
#Deal hole cards to other players
hole.cards.output <- get.hands(players,deck)
player.hands <- hole.cards.output[[1]]
new.deck <- hole.cards.output[[2]]
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Evaluate each hand
your.value <- hand.rank(community.cards,your.hand)[[2]]
#Evaluate other player values
player.values <- rep(0,players)
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,player.hands[j,])
}
player.values
#Evaluate other player values
player.values <- rep(0,players)
player.values
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,player.hands[j,])[[2]]
}
player.hands[1,]
community.cards
hand.rank(community.cards,player.hands[1,])
hand.rank(community.cards,your.hand)
player.hands[1,]
as.matrix(player.hands[1,])
as.matrix(player.hands[1,],nrow=1)
matrix(player.hands[1,],nrow=1)
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,matrix(player.hands[j,],nrow=1))[[2]]
}
player.values
if(max(player.values)<your.value){
results[1,1] <- results[1,1]+1
}else{
results[1,2] <- results[1,2]+1
}
#Simulation
for(i in 1:N){
new.deck <- start.deck
#Deal hole cards to other players
hole.cards.output <- get.hands(players,deck)
player.hands <- hole.cards.output[[1]]
new.deck <- hole.cards.output[[2]]
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Evaluate each hand
your.value <- hand.rank(community.cards,your.hand)[[2]]
#Evaluate other player values
player.values <- rep(0,players)
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,matrix(player.hands[j,],nrow=1))[[2]]
}
if(max(player.values)<your.value){
results[1,1] <- results[1,1]+1
}else{
results[1,2] <- results[1,2]+1
}
}
#Calculate win %
results[1,3] <- results[1,1]/(results[1,1]+results[1,2])
#Calculate win %
results[1,3] <- results[1,1]/(results[1,1]+results[1,2])
message(sprintf("Your hand wins %.2f%% of the time",100*results[1,3]))
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
hand.string <- paste(your.hand[2],"of",your.hand[1],"and",
your.hand[4],"of",your.hand[3])
hand.string
message(sprintf("%s wins %.2f%% of the time",hand.string,100*results[1,3]))
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=3))
message(sprintf("%s wins %.2f%% of the time",hand.string,100*results[1,3]))
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Set Seed
#set.seed(1)
hand <- matrix("J","J","Q","J","2","3","4")
#Set Seed
#set.seed(1)
hand <- matrix(c("J","J","Q","J","2","3","4"),nrow=1)
hand
three <- F
value <- "3."
#Creates a table of frequencies for the cards
table <- table(hand)
table
num <- sum(table==3)
three <- T
card <- which(deck[,1]==names(table)[which(table==3)])
table <- table[-which(table==3)]
order <- sort(match(names(table),deck[,1]),decreasing = T)[1:2]
value <- paste(value,substr(toString(card/14),3,4),sep="")
for(i in 1:length(order)){
value <- paste(value,substr(toString(order[i]/14),3,4),sep="")
}
if(num>=1){
three <- T
card <- which(deck[,1]==names(table)[which(table==3)])
table <- table[-which(table==3)]
order <- sort(match(names(table),deck[,1]),decreasing = T)[1:2]
value <- paste(value,substr(toString(card/14),3,4),sep="")
for(i in 1:length(order)){
value <- paste(value,substr(toString(order[i]/14),3,4),sep="")
}
}
value <- as.numeric(value)
value
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(deck[,1],hand)
order1
hand
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(deck[,1],hand)
order1
order2
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order1
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
results
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
#Simulation
for(i in 1:N){
new.deck <- start.deck
#Deal hole cards to other players
hole.cards.output <- get.hands(players,deck)
player.hands <- hole.cards.output[[1]]
new.deck <- hole.cards.output[[2]]
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Evaluate each hand
your.value <- hand.rank(community.cards,your.hand)[[2]]
#Evaluate other player values
player.values <- rep(0,players)
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,matrix(player.hands[j,],nrow=1))[[2]]
}
if(max(player.values)<your.value){
results[1,1] <- results[1,1]+1
}
if(max(player.values)>your.value){
results[1,2] <- results[1,2]+1
}else{
results[1,3] <- results[1,3]+1
}
}
results
N
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
results
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
#Simulation
for(i in 1:N){
new.deck <- start.deck
#Deal hole cards to other players
hole.cards.output <- get.hands(players,deck)
player.hands <- hole.cards.output[[1]]
new.deck <- hole.cards.output[[2]]
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Evaluate each hand
your.value <- hand.rank(community.cards,your.hand)[[2]]
#Evaluate other player values
player.values <- rep(0,players)
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,matrix(player.hands[j,],nrow=1))[[2]]
}
if(max(player.values)<your.value){
results[1,1] <- results[1,1]+1
break
}
if(max(player.values)>your.value){
results[1,2] <- results[1,2]+1
break
}else{
results[1,3] <- results[1,3]+1
}
}
results
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
#Simulation
for(i in 1:N){
new.deck <- start.deck
#Deal hole cards to other players
hole.cards.output <- get.hands(players,deck)
player.hands <- hole.cards.output[[1]]
new.deck <- hole.cards.output[[2]]
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Evaluate each hand
your.value <- hand.rank(community.cards,your.hand)[[2]]
#Evaluate other player values
player.values <- rep(0,players)
for(j in 1:players){
player.values[j]<- hand.rank(community.cards,matrix(player.hands[j,],nrow=1))[[2]]
}
if(max(player.values)<your.value){
results[1,1] <- results[1,1]+1
}
if(max(player.values)>your.value){
results[1,2] <- results[1,2]+1
}
if(max(player.values)==your.value){
results[1,3] <- results[1,3]+1
}
}
#Calculate win %
results[1,4] <- results[1,1]/N
results
sum(results[1,1:3])
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Set Seed
#set.seed(1)
hand <- matrix(c("A","A","K","J","Q","10","4"),nrow=1)
straight <- F
value <- "4."
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order2[which(order2==13)]=0 #Make aces low
#Sorts the cards high to low
order1 <- sort(order1,T)
order2 <- sort(order2,T)
for(i in 1:(length(hand)-4)){
val1 <- order1[i]
val2 <- order2[i]
if(identical(order1[seq(i,i+4)],seq(val1,val1-4,-1))){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
if(identical(order2[seq(i,i+4)],seq(val2,val2-4,-1))){
straight <- T
card <- order2[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
}
value
order1
order2
val1 <- order1[i]
i
val1
i=2
val1 <- order1[i]
val2 <- order2[i]
straight <- T
if(identical(order1[seq(i,i+4)],seq(val1,val1-4,-1))){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
value
order1[seq(2,2+4)]
seq(val1,val1-4,-1)
identical(order1[seq(2,2+4)],seq(val1,val1-4,-1))
order1[seq(2,2+4)]==seq(val1,val1-4,-1)
order1
sum(order1[2:(2+4)])
5*13-10
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
straight <- F
value <- "4."
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order2[which(order2==13)]=0 #Make aces low
#Sorts the cards high to low
order1 <- sort(order1,T)
order2 <- sort(order2,T)
val1 <- order1[i]
val2 <- order2[i]
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
i
i=1
sum(order1[i:(i+4)])==(5*order1[i]-10)
i=2
sum(order1[i:(i+4)])==(5*order1[i]-10)
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
value
straight <- F
value <- "4."
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order2[which(order2==13)]=0 #Make aces low
#Sorts the cards high to low
order1 <- sort(order1,T)
order2 <- sort(order2,T)
for(i in 1:(length(hand)-4)){
val1 <- order1[i]
val2 <- order2[i]
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
if(sum(order2[i:(i+4)])==(5*order2[i]-10)){
straight <- T
card <- order2[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
}
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Set Seed
#set.seed(1)
hand <- matrix(c("4","9","K","J","Q","10","4"),nrow=1)
straight <- F
value <- "4."
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order2[which(order2==13)]=0 #Make aces low
#Sorts the cards high to low
order1 <- sort(order1,T)
order2 <- sort(order2,T)
for(i in 1:(length(hand)-4)){
val1 <- order1[i]
val2 <- order2[i]
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
if(sum(order2[i:(i+4)])==(5*order2[i]-10)){
straight <- T
card <- order2[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
}
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
hand
your.hand
community.cards
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- start.deck
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
new.deck <- start.deck
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
hand<-cbind(community.cards,hand)
hand<-cbind(community.cards,your.hand)
hand
sf <- F
value <- "8."
#Check for a flush
table <- table(hand)
table
hand <- matrix(c("Hearts","K","Hearts","2","Hearts","5",),nrow=1)
hand <- matrix(c("Hearts","K","Hearts","2","Hearts","5","Hearts","7","Hearts","9","Spades","4","Spades","3"),nrow=1)
hand
sf <- F
value <- "8."
#Check for a flush
table <- table(hand)
table
hand <- hand[which(hand==names(which(table==max(table))))+1] #Remove suits and cards not with flush suit
hand
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
warnings()
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
data
sum(data[1:3])
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Initialize a data frame of all the cards
cards <- c("2","3","4","5","6","7","8","9","10","J","Q","K","A")
for(i in 1:13){
for(j in 1:13){
print(paste(cards[i],",",cards[j]))
}
}
#Initialize a data frame of all the cards
cards <- c("2","3","4","5","6","7","8","9","10","J","Q","K","A")
for(k in 1:2){
for(i in 1:13){
for(j in 1:13){
if(k==1){
if(i!=j){
print(paste(cards[i],",",cards[j],"suited"))
}
}else{
print(paste(cards[i],",",cards[j],"off suit"))
}
}
}
}
source("C:/Users/quanes/Dropbox/Random/Poker/Poker.R", echo=TRUE)
View(data)
setwd("C:/Users/quanes/Dropbox/Random/Poker")
write.xlsx(percentages,"Poker Percentages.xlsx",sheetName = "Range")
write.xlsx(data,"Poker Percentages.xlsx",sheetName = "Range")
