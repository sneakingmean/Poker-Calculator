order1 <- sort(order1,T)
order2 <- sort(order2,T)
val1 <- order1[i]
val2 <- order2[i]
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
i
i=1
sum(order1[i:(i+4)])==(5*order1[i]-10)
i=2
sum(order1[i:(i+4)])==(5*order1[i]-10)
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
value
straight <- F
value <- "4."
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order2[which(order2==13)]=0 #Make aces low
#Sorts the cards high to low
order1 <- sort(order1,T)
order2 <- sort(order2,T)
for(i in 1:(length(hand)-4)){
val1 <- order1[i]
val2 <- order2[i]
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
if(sum(order2[i:(i+4)])==(5*order2[i]-10)){
straight <- T
card <- order2[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
}
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Set Seed
#set.seed(1)
hand <- matrix(c("4","9","K","J","Q","10","4"),nrow=1)
straight <- F
value <- "4."
#Finds the numeric value for the 7 cards
order1 <- order2 <- match(hand,deck[,1])
order2[which(order2==13)]=0 #Make aces low
#Sorts the cards high to low
order1 <- sort(order1,T)
order2 <- sort(order2,T)
for(i in 1:(length(hand)-4)){
val1 <- order1[i]
val2 <- order2[i]
if(sum(order1[i:(i+4)])==(5*order1[i]-10)){
straight <- T
card <- order1[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
if(sum(order2[i:(i+4)])==(5*order2[i]-10)){
straight <- T
card <- order2[i]
value <- paste(value,substr(toString(card/14),3,4),sep="")
value <- as.numeric(value)
return(list(straight,value))
}
}
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
hand
your.hand
community.cards
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- start.deck
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
new.deck <- start.deck
#Deal out five community cards
community.cards.output <- get.deal(new.deck)
community.cards <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
hand<-cbind(community.cards,hand)
hand<-cbind(community.cards,your.hand)
hand
sf <- F
value <- "8."
#Check for a flush
table <- table(hand)
table
hand <- matrix(c("Hearts","K","Hearts","2","Hearts","5",),nrow=1)
hand <- matrix(c("Hearts","K","Hearts","2","Hearts","5","Hearts","7","Hearts","9","Spades","4","Spades","3"),nrow=1)
hand
sf <- F
value <- "8."
#Check for a flush
table <- table(hand)
table
hand <- hand[which(hand==names(which(table==max(table))))+1] #Remove suits and cards not with flush suit
hand
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
warnings()
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=1,ncol=4))
names(results)<- c("Your Wins","Opponent Wins","Ties","Win %")
#Remove your hand from the deck
for(i in 1:2){
suit <- which(suits==your.hand[2*i-1])
card <- which(deck[,i]==your.hand[2*i])
start.deck[card,suit] <- NA
}
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
data
sum(data[1:3])
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
source("C:/Users/quanes/Dropbox/Random/Poker.R", echo=TRUE)
#Initialize a data frame of all the cards
cards <- c("2","3","4","5","6","7","8","9","10","J","Q","K","A")
for(i in 1:13){
for(j in 1:13){
print(paste(cards[i],",",cards[j]))
}
}
#Initialize a data frame of all the cards
cards <- c("2","3","4","5","6","7","8","9","10","J","Q","K","A")
for(k in 1:2){
for(i in 1:13){
for(j in 1:13){
if(k==1){
if(i!=j){
print(paste(cards[i],",",cards[j],"suited"))
}
}else{
print(paste(cards[i],",",cards[j],"off suit"))
}
}
}
}
source("C:/Users/quanes/Dropbox/Random/Poker/Poker.R", echo=TRUE)
View(data)
setwd("C:/Users/quanes/Dropbox/Random/Poker")
write.xlsx(percentages,"Poker Percentages.xlsx",sheetName = "Range")
write.xlsx(data,"Poker Percentages.xlsx",sheetName = "Range")
source("C:/Users/quanes/Dropbox/Random/Poker/Poker.R", echo=TRUE)
#Initialize a data frame of all the cards
percentages <- as.data.frame(matrix(NA,nrow=players+1,ncol=16))
names(percentages) <-c("P.S1","P.C1","P.S2","P.C2","C.C.S1","C.C.C1","C.C.S2",
"C.C.C2","C.C.S3","C.C.C3","C.C.S4","C.C.C4","C.C.S5",
"C.C.C5","Rank","Winner")
View(percentages)
#Get Player Hands
hands <- get.hands(players,deck)
hands
players
#Get Player Hands
hands <- get.hands(players,deck)
new.deck <- hands[[2]]
hands <- hands[[1]]
your.hand <- hands[1,]
player.hand <- hands[2,]
hands
#Number of other players (1 minimum, 23 max)
players <- 2
#Get Player Hands
hands <- get.hands(players,deck)
new.deck <- hands[[2]]
hands <- hands[[1]]
your.hand <- hands[1,]
player.hand <- hands[2,]
your.hand
player.hand
data <- simulate.preflop(deck,your.hand,player.hand,1,print)
data <- simulate.preflop(new.deck,your.hand,player.hand,1,print)
data <- simulate.preflop(new.deck,your.hand,player.hand,1,print)
#Get Player Hands
your.hand <- get.hands(players-1,deck)[[1]]
your.hand
data <- simulate.preflop(deck,your.hand,1,1,print)
print
print <- F
data <- simulate.preflop(deck,your.hand,1,1,print)
data
start.time <- Sys.time()
#Initialize a data frame of all the cards
results <- as.data.frame(matrix(NA,nrow=players,ncol=16))
names(results) <-c("P.S1","P.C1","P.S2","P.C2","C.C.S1","C.C.C1","C.C.S2",
"C.C.C2","C.C.S3","C.C.C3","C.C.S4","C.C.C4","C.C.S5",
"C.C.C5","Rank","Winner")
row.names(results) <- c("Player 1","Player 2")
#Get Player Hands
your.hand <- get.hands(players-1,deck)[[1]]
data <- simulate.preflop(deck,your.hand,1,1,print)
results[1,16] = data[1,1]
results[2,16] = data[1,2]
results
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=2,ncol=4))
names(results)<- c("Win","Tie","Rank")
results
#Initialize a data frame of all the cards
results <- as.data.frame(matrix(NA,nrow=players,ncol=16))
names(results) <-c("P.S1","P.C1","P.S2","P.C2","C.C.S1","C.C.C1","C.C.S2",
"C.C.C2","C.C.S3","C.C.C3","C.C.S4","C.C.C4","C.C.S5",
"C.C.C5","Rank","Winner")
row.names(results) <- c("Player 1","Player 2")
#Get Player Hands
hands <- get.hands(players,deck)[[1]]
data <- simulate.preflop(deck,hands)
start.deck <- deck
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=2,ncol=4))
names(results)<- c("Win","Tie","Rank")
#Remove player hands from the deck
for(j in 1:players){
for(i in 1:2){
suit <- which(suits==players[j,2*i-1])
card <- which(deck[,i]==your.hand[j,2*i])
start.deck[card,suit] <- NA
}
}
players <- hands
players
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=nrow(players),ncol=4))
names(results)<- c("Win","Tie","Rank")
#Remove player hands from the deck
for(j in 1:players){
for(i in 1:2){
suit <- which(suits==players[j,2*i-1])
card <- which(deck[,i]==your.hand[j,2*i])
start.deck[card,suit] <- NA
}
}
players
#Remove player hands from the deck
for(j in 1:players){
for(i in 1:2){
suit <- which(suits==players[j,2*i-1])
card <- which(deck[,i]==your.hand[j,2*i])
start.deck[card,suit] <- NA
}
}
Nplayers <- nrow(players)
#Initialize data frame of hand results
results <- as.data.frame(matrix(0,nrow=Nplayers,ncol=4))
names(results)<- c("Win","Tie","Rank")
#Remove player hands from the deck
for(j in 1:Nplayers){
for(i in 1:2){
suit <- which(suits==players[j,2*i-1])
card <- which(deck[,i]==your.hand[j,2*i])
start.deck[card,suit] <- NA
}
}
Nplayers
#Remove player hands from the deck
for(j in 1:Nplayers){
for(i in 1:2){
suit <- which(suits==players[j,2*i-1])
card <- which(deck[,i]==players[j,2*i])
start.deck[card,suit] <- NA
}
}
#Simulation hand
new.deck <- start.deck
#Deal out the flop community cards
community.cards.output <- get.flop(new.deck)
community.cards <- flop <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Deal out the turn card
community.cards.output <- get.turn.river(new.deck)
turn <- community.cards.output[[1]]
community.cards <- cbind(community.cards,turn)
new.deck <- community.cards.output[[2]]
#Deal out the river card
community.cards.output <- get.turn.river(new.deck)
river <- community.cards.output[[1]]
community.cards <- cbind(community.cards,river)
new.deck <- community.cards.output[[2]]
#Initialize a data frame of all the cards
results <- as.data.frame(matrix(NA,nrow=players,ncol=16))
names(results) <-c("P.S1","P.C1","P.S2","P.C2","C.C.S1","C.C.C1","C.C.S2",
"C.C.C2","C.C.S3","C.C.C3","C.C.S4","C.C.C4","C.C.S5",
"C.C.C5","Rank","Winner")
row.names(results) <- c("Player 1","Player 2")
#Initialize a data frame of all the cards
results <- as.data.frame(matrix(NA,nrow=Nplayers,ncol=16))
names(results) <-c("P.S1","P.C1","P.S2","P.C2","C.C.S1","C.C.C1","C.C.S2",
"C.C.C2","C.C.S3","C.C.C3","C.C.S4","C.C.C4","C.C.S5",
"C.C.C5","Rank","Winner")
row.names(results) <- c("Player 1","Player 2")
results
community.cards
#Evaluate other player values
player.values <- rep(0,players)
#Evaluate other player values
player.values <- rep(0,Nplayers)
for(j in 1:Nplayers){
player.eval <- hand.rank(community.cards,matrix(player.hands[j,],nrow=1))
player.values[j]<- player.eval[j][[2]]
results[j,15]<- player.eval[j][[1]]
}
for(j in 1:Nplayers){
player.eval <- hand.rank(community.cards,matrix(players[j,],nrow=1))
player.values[j]<- player.eval[j][[2]]
results[j,15]<- player.eval[j][[1]]
}
#Evaluate other player values
player.values <- rep(0,Nplayers)
for(j in 1:Nplayers){
player.eval <- hand.rank(community.cards,matrix(players[j,],nrow=1))
player.values[j]<- player.eval[[2]]
results[j,15]<- player.eval[[1]]
}
results
#Input hands into results dataframe
for(i in 1:Nplayers){
results[i,1:14]<- cbind(players[i,],community.cards)
}
#Input hands into results dataframe
for(i in 1:Nplayers){
results[i,1:14]<- cbind(matrix(players[i,],nrow=1),community.cards)
}
results
player.values
names(results) <-c("P.S1","P.C1","P.S2","P.C2","F.S1","F.C1","F.S2",
"F.C2","F.S3","F.C3","T.S4","T.C4","R.S5",
"R.C5","Rank","Winner")
results
player.values[,1]
player.values
#Evaluate winner
winner <- which(player.values==max(player.values))
winner
length(winner)
#Evaluate winner
winner <- which(player.values==max(player.values))
if(length(winner)>1){
results[winner,16] <- 2
}
else{
results
start.time <- Sys.time()
#Get Player Hands
hands <- get.hands(players,deck)[[1]]
start.time <- Sys.time()
#Get Player Hands
hands <- get.hands(Nplayers,deck)[[1]]
data <- simulate.preflop(deck,hands)
data <- simulate.one.hand(deck,hands)
#Input all the players hands and simulate the rest of the hand
#Returns each hand, each hand rank, and the winner of the hand
simulate.one.hand <- function(deck,players=2){
start.deck <- deck
Nplayers <- nrow(players)
#Initialize a data frame of all the cards
results <- as.data.frame(matrix(NA,nrow=Nplayers,ncol=16))
names(results) <-c("P.S1","P.C1","P.S2","P.C2","F.S1","F.C1","F.S2",
"F.C2","F.S3","F.C3","T.S4","T.C4","R.S5",
"R.C5","Rank","Winner")
row.names(results) <- c("Player 1","Player 2")
#Remove player hands from the deck
for(j in 1:Nplayers){
for(i in 1:2){
suit <- which(suits==players[j,2*i-1])
card <- which(deck[,i]==players[j,2*i])
start.deck[card,suit] <- NA
}
}
#Simulation hand
new.deck <- start.deck
#Deal out the flop community cards
community.cards.output <- get.flop(new.deck)
community.cards <- flop <- community.cards.output[[1]]
new.deck <- community.cards.output[[2]]
#Deal out the turn card
community.cards.output <- get.turn.river(new.deck)
turn <- community.cards.output[[1]]
community.cards <- cbind(community.cards,turn)
new.deck <- community.cards.output[[2]]
#Deal out the river card
community.cards.output <- get.turn.river(new.deck)
river <- community.cards.output[[1]]
community.cards <- cbind(community.cards,river)
new.deck <- community.cards.output[[2]]
#Input hands into results dataframe
for(i in 1:Nplayers){
results[i,1:14]<- cbind(matrix(players[i,],nrow=1),community.cards)
}
#Evaluate other player values
player.values <- rep(0,Nplayers)
for(j in 1:Nplayers){
player.eval <- hand.rank(community.cards,matrix(players[j,],nrow=1))
player.values[j]<- player.eval[[2]]
results[j,15]<- player.eval[[1]]
}
#Evaluate winner
winner <- which(player.values==max(player.values))
if(length(winner)>1){
results[winner,16] <- 2
}
else{
results[winner,16] <- 1
results[-winner,16] <- 0
}
return(results)
}
data <- simulate.one.hand(deck,hands)
data
View(data)
for(i in 1:N){
#Get Player Hands
hands <- get.hands(Nplayers,deck)[[1]]
data <- simulate.one.hand(deck,hands)
results[(2*i):(2*i+1),] = data
}
results
View(results)
#Dataframe to export
#Initialize a data frame of all the cards
results <- as.data.frame(matrix(NA,nrow=N*Nplayers,ncol=16))
names(results) <-c("P.S1","P.C1","P.S2","P.C2","F.S1","F.C1","F.S2",
"F.C2","F.S3","F.C3","T.S4","T.C4","R.S5",
"R.C5","Rank","Winner")
for(i in 1:N){
#Get Player Hands
row.names(results[(2*i-1):(2*i)]) <- c("Player 1","Player 2")
hands <- get.hands(Nplayers,deck)[[1]]
data <- simulate.one.hand(deck,hands)
results[(2*i-1):(2*i),] = data
}
results
View(results)
"a" + "b"
paste("Player",sprintf("%i",1))
playernames <- rep(NA,Nplayers)
for(i in 1:Nplayers){
playernames[i] <- paste("Player",sprintf("%i",i))
}
playernames
playernames*2
playernames <- rep(playernames,N)
playernames
row.names(results) <- playernames
results.row.names <- rep(NA,Nplayers*N)
for(i in 1:N){
for(j in 1:Nplayers){
results.row.names[Nplayers*(i-1)+j] <- paste(playernames[j],sprintf("Game %i",i))
}
}
row.names(results) <- playernames
row.names(results) <- results.row.names
results
View(results)
for(i in 1:N){
#Get Player Hands
hands <- get.hands(Nplayers,deck)[[1]]
data <- simulate.one.hand(deck,hands)
results[(Nplayers*(i-1)+1):(Nplayers*i),] = data
}
# Run function to export deeplearning data
export <- T
data <- deeplearning.data(export=export)
source("C:/Users/quanes/Dropbox/Random/Poker/Poker.R", echo=TRUE)
data <- deeplearning.data()
data <- deeplearning.data()
source("C:/Users/quanes/Dropbox/Random/Poker/Poker.R", echo=TRUE)
data
View(data)
write.csv(data,"deeplearningdata.csv")
source("C:/Users/quanes/Dropbox/Random/Poker/Poker.R", echo=TRUE)
write.csv(data,"deeplearning.csv")
